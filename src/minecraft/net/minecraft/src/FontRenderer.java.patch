diff --git a/src/minecraft/net/minecraft/src/FontRenderer.java b/src/minecraft/net/minecraft/src/FontRenderer.java
index 3251f0a..1091df1 100644
--- a/src/minecraft/net/minecraft/src/FontRenderer.java
+++ b/src/minecraft/net/minecraft/src/FontRenderer.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.src.betterfonts.StringCache;
+import net.minecraft.src.betterfonts.ConfigParser;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.io.InputStream;
@@ -13,6 +15,10 @@ import org.lwjgl.opengl.GL11;
 
 public class FontRenderer
 {
+    public static boolean betterFontsEnabled = true;
+    public StringCache stringCache;
+    public boolean dropShadowEnabled = true;
+
     /**
      * Compiled regular expression pattern for matching color codes in a string
      */
@@ -181,6 +187,25 @@ public class FontRenderer
 
             colorCode[l] = (l1 & 0xff) << 16 | (j2 & 0xff) << 8 | l2 & 0xff;
         }
+
+        /* Only use OpenType rendering for the primary FontRenderer and not for the enchantment table Standard Galactic renderer */
+        if(par2Str.equals("/font/default.png"))
+        {
+            stringCache = new StringCache(colorCode);
+
+            /* Read optional config file to override the default font name/size */
+            ConfigParser config = new ConfigParser();
+            if(config.loadConfig("/config/BetterFonts.cfg"))
+            {
+                String fontName = config.getFontName("SansSerif");
+                int fontSize = config.getFontSize(18);
+                boolean antiAlias = config.getBoolean("font.antialias", false);
+                dropShadowEnabled = config.getBoolean("font.dropshadow", true);
+
+                stringCache.setDefaultFont(fontName, fontSize, antiAlias);
+                System.out.println("BetterFonts configuration loaded");
+            }
+        }
     }
 
     /**
@@ -310,7 +335,11 @@ public class FontRenderer
             par1Str = bidiReorder(par1Str);
         }
 
-        int i = renderString(par1Str, par2 + 1, par3 + 1, par4, true);
+        int i = 0;
+        if(dropShadowEnabled)
+        {
+            i = renderString(par1Str, par2 + 1, par3 + 1, par4, true);
+        }
         i = Math.max(i, renderString(par1Str, par2, par3, par4, false));
         return i;
     }
@@ -333,6 +362,10 @@ public class FontRenderer
      */
     private String bidiReorder(String par1Str)
     {
+        if (betterFontsEnabled && stringCache != null)
+        {
+            return par1Str;
+        }
         if (par1Str == null || !Bidi.requiresBidi(par1Str.toCharArray(), 0, par1Str.length()))
         {
             return par1Str;
@@ -567,7 +600,14 @@ public class FontRenderer
             GL11.glColor4f(red, blue, green, alpha);
             posX = par2;
             posY = par3;
-            renderStringAtPos(par1Str, par5);
+            if (betterFontsEnabled && stringCache != null)
+            {
+                posX += stringCache.renderString(par1Str, par2, par3, par4, par5);
+            }
+            else
+            {
+                renderStringAtPos(par1Str, par5);
+            }
             return (int)posX;
         }
         else
@@ -581,6 +621,10 @@ public class FontRenderer
      */
     public int getStringWidth(String par1Str)
     {
+        if (betterFontsEnabled && stringCache != null)
+        {
+            return stringCache.getStringWidth(par1Str);
+        }
         if (par1Str == null)
         {
             return 0;
@@ -670,6 +714,10 @@ public class FontRenderer
      */
     public String trimStringToWidth(String par1Str, int par2, boolean par3)
     {
+        if (betterFontsEnabled && stringCache != null)
+        {
+            return stringCache.trimStringToWidth(par1Str, par2, par3);
+        }
         StringBuilder stringbuilder = new StringBuilder();
         int i = 0;
         int j = par3 ? par1Str.length() - 1 : 0;
@@ -928,6 +976,10 @@ public class FontRenderer
      */
     private int sizeStringToWidth(String par1Str, int par2)
     {
+        if (betterFontsEnabled && stringCache != null)
+        {
+            return stringCache.sizeStringToWidth(par1Str, par2);
+        }
         int i = par1Str.length();
         int j = 0;
         int k = 0;
